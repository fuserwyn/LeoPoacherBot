import asyncio
import logging
import os
from datetime import datetime, timedelta

import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ChatMemberStatus
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
scheduled_removals = {}

DB_NAME = "training.db"


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_NAME) as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS message_log (
                user_id INTEGER,
                chat_id INTEGER,
                last_message TEXT,
                has_training_done BOOLEAN DEFAULT FALSE,
                has_sick_leave BOOLEAN DEFAULT FALSE,
                has_healthy BOOLEAN DEFAULT FALSE,
                timer_start_time TEXT,
                sick_leave_start_time TEXT,
                PRIMARY KEY (user_id, chat_id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
        await db.execute('''
            CREATE TABLE IF NOT EXISTS training_log (
                user_id INTEGER PRIMARY KEY,
                last_report TEXT
            )
        ''')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è has_sick_leave
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ has_sick_leave
            await db.execute('''
                SELECT has_sick_leave FROM message_log LIMIT 1
            ''')
            logging.info("–ü–æ–ª–µ has_sick_leave —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except aiosqlite.OperationalError:
            # –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            logging.info("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ has_sick_leave –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            await db.execute('''
                ALTER TABLE message_log ADD COLUMN has_sick_leave BOOLEAN DEFAULT FALSE
            ''')
            logging.info("–ü–æ–ª–µ has_sick_leave —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è has_healthy
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ has_healthy
            await db.execute('''
                SELECT has_healthy FROM message_log LIMIT 1
            ''')
            logging.info("–ü–æ–ª–µ has_healthy —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except aiosqlite.OperationalError:
            # –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            logging.info("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ has_healthy –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            await db.execute('''
                ALTER TABLE message_log ADD COLUMN has_healthy BOOLEAN DEFAULT FALSE
            ''')
            logging.info("–ü–æ–ª–µ has_healthy —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è timer_start_time
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ timer_start_time
            await db.execute('''
                SELECT timer_start_time FROM message_log LIMIT 1
            ''')
            logging.info("–ü–æ–ª–µ timer_start_time —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except aiosqlite.OperationalError:
            # –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            logging.info("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ timer_start_time –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            await db.execute('''
                ALTER TABLE message_log ADD COLUMN timer_start_time TEXT
            ''')
            logging.info("–ü–æ–ª–µ timer_start_time —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è sick_leave_start_time
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ sick_leave_start_time
            await db.execute('''
                SELECT sick_leave_start_time FROM message_log LIMIT 1
            ''')
            logging.info("–ü–æ–ª–µ sick_leave_start_time —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except aiosqlite.OperationalError:
            # –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            logging.info("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ sick_leave_start_time –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            await db.execute('''
                ALTER TABLE message_log ADD COLUMN sick_leave_start_time TEXT
            ''')
            logging.info("–ü–æ–ª–µ sick_leave_start_time —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        await db.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


@dp.chat_member()
async def handle_chat_member_updated(event: types.ChatMemberUpdated):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç"""
    if event.new_chat_member.status == ChatMemberStatus.MEMBER:
        user_id = event.new_chat_member.user.id
        chat_id = event.chat.id
        username = event.new_chat_member.user.username or event.new_chat_member.user.first_name
        
        logging.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {user_id} (@{username})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        try:
            welcome_message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!**\n\nü§ñ –Ø Fat Leopard - –º–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä!\n\n‚è∞ –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!\n‚Ä¢ –£ —Ç–µ–±—è –µ—Å—Ç—å 7 –¥–Ω–µ–π —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å `#training_done`\n‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á–µ—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞\n\nüí™ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ `#training_done` –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
            
            await bot.send_message(chat_id, welcome_message, parse_mode="Markdown")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id} (@{username})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        logging.info(f"‚è∞ –ó–ê–ü–£–°–ö –¢–ê–ô–ú–ï–†–ê –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} (@{username})")
        warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60))  # 6 –¥–Ω–µ–π = 6 * 24 * 60 * 60 —Å–µ–∫—É–Ω–¥
        removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60))  # 7 –¥–Ω–µ–π = 7 * 24 * 60 * 60 —Å–µ–∫—É–Ω–¥
        scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
        logging.info(f"‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} (@{username}) - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 6 –¥–Ω–µ–π, —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")


@dp.message()
async def handle_message(msg: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    if msg.text and msg.text.startswith("/help"):
        help_text = """
ü§ñ **LeoPoacherBot ‚Äî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞**

üëã **–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:**
‚Ä¢ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–ª—è –≤–∞—Å —Ç–∞–π–º–µ—Ä.
‚Ä¢ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã —Å —Ç–µ–≥–æ–º `#training_done`.
‚Ä¢ –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç ‚Äî —Å—Ç–∞–Ω–µ—Ç–µ "–¢–æ–ª—Å—Ç—ã–º –õ–µ–æ–ø–∞—Ä–¥–æ–º" –∏ –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–∞—Ç–∞!

‚Ä¢ `/help` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí™ **–û—Ç—á—ë—Ç—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:**
‚Ä¢ `#training_done` ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–º–æ–∂–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
‚Ä¢ `#sick_leave` ‚Äî –í–∑—è—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π (—Ç–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è)
‚Ä¢ `#healthy` ‚Äî –°–æ–æ–±—â–∏—Ç—å –æ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–∏ (—Ç–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)

üìú **–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –û—Ç—á—ë—Ç–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–æ–º `#training_done` (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ).
‚Ä¢ –ï—Å–ª–∏ –∑–∞–±–æ–ª–µ–ª–∏ –∏–ª–∏ —É–µ—Ö–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `#sick_leave`, —á—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä.
‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `#healthy`, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –≥–¥–µ –ø—Ä–µ—Ä–≤–∞–ª–∏.
‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á—ë—Ç–∞ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á—ë—Ç–∞ ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞.

‚è∞ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
‚Ä¢ –ö–∞–∂–¥—ã–π –æ—Ç—á—ë—Ç —Å `#training_done` –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–∞ 7 –¥–Ω–µ–π.
‚Ä¢ –ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä, –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
‚Ä¢ –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –≤–æ –≤—Ä–µ–º—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä.
"""
        await msg.reply(help_text, parse_mode="Markdown")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /db
    if msg.text and msg.text.startswith("/db"):
        chat_id = msg.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        try:
            chat_member = await bot.get_chat_member(chat_id, msg.from_user.id)
            if chat_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                await msg.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect(DB_NAME) as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                async with db.execute('''
                    SELECT user_id, last_message, has_training_done, has_sick_leave, has_healthy, timer_start_time, sick_leave_start_time
                    FROM message_log 
                    WHERE chat_id = ?
                    ORDER BY last_message DESC
                ''', (chat_id,)) as cursor:
                    users = await cursor.fetchall()
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
                async with db.execute('''
                    SELECT user_id, last_report
                    FROM training_log
                    ORDER BY last_report DESC
                ''') as cursor:
                    training_reports = await cursor.fetchall()
            
            if not users:
                await msg.reply("üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞**\n\n–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            db_report = f"üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞**\n\n"
            db_report += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ:** {len(users)}\n"
            db_report += f"üìù **–û—Ç—á–µ—Ç–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö:** {len(training_reports)}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            db_report += f"üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n"
            for i, (user_id, last_message, has_training_done, has_sick_leave, has_healthy, timer_start_time, sick_leave_start_time) in enumerate(users[:10], 1):
                status_emoji = "‚úÖ" if has_training_done else "‚è∞" if has_sick_leave else "üí™" if has_healthy else "üìù"
                timer_info = ""
                if timer_start_time:
                    timer_info = " ‚è∞"
                if sick_leave_start_time:
                    timer_info += " üè•"
                db_report += f"{i}. ID: {user_id} {status_emoji}{timer_info}\n"
            
            if len(users) > 10:
                db_report += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await msg.reply(db_report, parse_mode="Markdown")
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {msg.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ {chat_id}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await msg.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start_timer
    if msg.text and msg.text.startswith("/start_timer"):
        chat_id = msg.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        try:
            chat_member = await bot.get_chat_member(chat_id, msg.from_user.id)
            if chat_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                await msg.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
                return
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return

        try:
            await msg.reply("üêÜ **Fat Leopard –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...", parse_mode="Markdown")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect(DB_NAME) as db:
                async with db.execute('''
                    SELECT DISTINCT user_id FROM message_log 
                    WHERE chat_id = ?
                    ORDER BY last_message DESC
                ''', (chat_id,)) as cursor:
                    db_users = await cursor.fetchall()
            
            # if not db_users:
            #     await msg.reply("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
            #     return
            
            current_time = datetime.utcnow().isoformat()
            started_timers = 0
            failed_users = []
            
            for (user_id,) in db_users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —á–∞—Ç–µ
                    chat_member = await bot.get_chat_member(chat_id, user_id)
                    if chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                        username = chat_member.user.username or chat_member.user.first_name
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        async with aiosqlite.connect(DB_NAME) as db:
                            await db.execute('''
                                UPDATE message_log 
                                SET last_message = ?, has_training_done = FALSE, has_sick_leave = FALSE, has_healthy = FALSE, timer_start_time = ?, sick_leave_start_time = NULL
                                WHERE user_id = ? AND chat_id = ?
                            ''', (current_time, current_time, user_id, chat_id))
                            await db.commit()
                        
                        # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
                        if user_id in scheduled_removals:
                            cancel_user_removal(user_id)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–π–º–µ—Ä—ã
                        warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60))
                        removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60))
                        scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
                        
                        started_timers += 1
                        logging.info(f"‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è: {user_id} (@{username})")
                        
                    else:
                        failed_users.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (–Ω–µ –≤ —á–∞—Ç–µ)")
                        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —á–∞—Ç–µ")
                        
                except Exception as e:
                    failed_users.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (–æ—à–∏–±–∫–∞: {e})")
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            result_message = f"üêÜ **Fat Leopard –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n"
            if failed_users:
                result_message += f"‚ùå **–û—à–∏–±–∫–∏:** {len(failed_users)}\n"
            result_message += f"\n‚è±Ô∏è **–í—Ä–µ–º—è:** 7 –¥–Ω–µ–π\n"
            result_message += f"üí™ **–î–µ–π—Å—Ç–≤–∏–µ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ `#training_done`\n\n"
            result_message += f"ü¶Å **–í—ã –≤–µ–¥—å –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∫–∞–∫ Fat Leopard?**\n"
            result_message += f"–¢–æ–≥–¥–∞ —Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç—á–µ—Ç—ã!"
            
            await msg.reply(result_message, parse_mode="Markdown")
            logging.info(f"Fat Leopard –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä—ã: {started_timers} —É—Å–ø–µ—à–Ω–æ, {len(failed_users)} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–æ–≤: {e}")
            await msg.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–æ–≤")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leopard_say
    if msg.text and msg.text.startswith("/leopard_say"):
        if msg.from_user.id != OWNER_ID:
            await msg.reply("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
            return
        text = msg.text[len("/leopard_say"):].strip()
        if not text:
            await msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–∫—É –±–æ—Ç—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID —á–∞—Ç–∞
        if msg.chat.type == "private":
            await msg.reply("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞:\n1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É /chat_id\n3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await bot.send_message(msg.chat.id, f"ü¶Å {text}")
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        try:
            await bot.delete_message(msg.chat.id, msg.message_id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /leopard_say: {e}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
    if msg.text and msg.text.startswith("/chat_id"):
        if msg.from_user.id != OWNER_ID:
            return
        chat_id = msg.chat.id
        chat_title = msg.chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        await msg.reply(f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\nüÜî **ID —á–∞—Ç–∞:** `{chat_id}`\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat_title}\n\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç (–∏–∑ –ª–∏—á–∫–∏)
    if msg.text and msg.text.startswith("/send_to_chat"):
        if msg.from_user.id != OWNER_ID:
            await msg.reply("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
            return
        if msg.chat.type != "private":
            await msg.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /send_to_chat CHAT_ID —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = msg.text.split(" ", 2)
        if len(parts) < 3:
            await msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to_chat CHAT_ID —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        try:
            target_chat_id = int(parts[1])
            message_text = parts[2]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
            await bot.send_message(target_chat_id, f"ü¶Å {message_text}")
            await msg.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_chat_id}")
            
        except ValueError:
            await msg.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send_to_chat CHAT_ID —Ç–µ–∫—Å—Ç")
        except Exception as e:
            await msg.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
    if not msg.text or not msg.text.startswith("/"):
        chat_id = msg.chat.id
        user_id = msg.from_user.id
        current_time = datetime.utcnow()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º #training_done –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
        message_text = msg.text or msg.caption or ""
        has_training_done = "#training_done" in message_text.lower()
        has_sick_leave = "#sick_leave" in message_text.lower()
        has_healthy = "#healthy" in message_text.lower()
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{message_text}' (has_training_done: {has_training_done}, has_sick_leave: {has_sick_leave}, has_healthy: {has_healthy})")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        try:
            async with aiosqlite.connect(DB_NAME) as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with db.execute('''
                    SELECT timer_start_time, sick_leave_start_time FROM message_log 
                    WHERE user_id = ? AND chat_id = ?
                ''', (user_id, chat_id)) as cursor:
                    row = await cursor.fetchone()
                    current_timer_start = row[0] if row else None
                    current_sick_leave_start = row[1] if row else None
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞
                timer_start_time = current_timer_start
                if has_training_done and not current_timer_start:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π #training_done, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞
                    timer_start_time = current_time.isoformat()
                elif has_training_done and current_timer_start:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π #training_done, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞
                    timer_start_time = current_time.isoformat()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
                sick_leave_start_time = current_sick_leave_start
                if has_sick_leave and not current_sick_leave_start:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π #sick_leave, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
                    sick_leave_start_time = current_time.isoformat()
                elif has_healthy and current_sick_leave_start:
                    # –ï—Å–ª–∏ —ç—Ç–æ #healthy, –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
                    sick_leave_start_time = None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                await db.execute('''
                    INSERT OR REPLACE INTO message_log (user_id, chat_id, last_message, has_training_done, has_sick_leave, has_healthy, timer_start_time, sick_leave_start_time)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (user_id, chat_id, current_time.isoformat(), has_training_done, has_sick_leave, has_healthy, timer_start_time, sick_leave_start_time))
                await db.commit()
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in scheduled_removals:
            username = msg.from_user.username or msg.from_user.first_name
            logging.info(f"üÜï –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
            warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60))  # 6 –¥–Ω–µ–π
            removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60))  # 7 –¥–Ω–µ–π
            scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
            logging.info(f"‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

        if has_training_done:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ training_log
            async with aiosqlite.connect(DB_NAME) as db:
                await db.execute('''
                    INSERT OR REPLACE INTO training_log (user_id, last_report)
                    VALUES (?, ?)
                ''', (user_id, current_time.isoformat()))
                await db.commit()
            logging.info(f"–û—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                await msg.reply("‚úÖ –û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç üí™\n\n‚è∞ –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 7 –¥–Ω–µ–π\n\nüéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å #training_done !")
                logging.info(f"–û—Ç–≤–µ—Ç '–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ #training_done
            username = msg.from_user.username or msg.from_user.first_name
            timer_start_time = current_time.isoformat()
            logging.info(f"–ó–ê–ü–£–°–ö –ù–û–í–û–ì–û –¢–ê–ô–ú–ï–†–ê: –ü–æ—Å–ª–µ #training_done –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")
            warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60, timer_start_time))  # 6 –¥–Ω–µ–π
            removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60, timer_start_time))  # 7 –¥–Ω–µ–π
            scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
            logging.info(f"–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 6 –¥–Ω–µ–π, —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")
        
        elif has_sick_leave:
            # –ï—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å–Ω–∏—á–Ω—ã–π, –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            username = msg.from_user.username or msg.from_user.first_name
            logging.info(f"üè• –ë–û–õ–¨–ù–ò–ß–ù–´–ô: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –±–æ–ª—å–Ω–∏—á–Ω—ã–π")
            
            # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
            if user_id in scheduled_removals:
                cancel_user_removal(user_id)
                logging.info(f"–¢–∞–π–º–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –≤—Ä–µ–º—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ")
            
            try:
                await msg.reply("üè• **–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ø—Ä–∏–Ω—è—Ç!** ü§í\n\n‚è∏Ô∏è –¢–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤—Ä–µ–º—è –±–æ–ª–µ–∑–Ω–∏\n\nüí™ –í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!\n\nüìù –ö–æ–≥–¥–∞ –ø–æ–ø—Ä–∞–≤–∏—à—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å `#healthy` –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                logging.info(f"–û—Ç–≤–µ—Ç '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ø—Ä–∏–Ω—è—Ç' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        elif has_healthy:
            # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –≥–¥–µ –ø—Ä–µ—Ä–≤–∞–ª–∏
            username = msg.from_user.username or msg.from_user.first_name
            logging.info(f"üí™ –í–´–ó–î–û–†–û–í–õ–ï–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–µ—Ä–∞ –∏ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
            async with aiosqlite.connect(DB_NAME) as db:
                async with db.execute('''
                    SELECT timer_start_time, sick_leave_start_time FROM message_log 
                    WHERE user_id = ? AND chat_id = ? 
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id, chat_id)) as cursor:
                    row = await cursor.fetchone()
                    timer_start_time = row[0] if row else None
                    sick_leave_start_time = row[1] if row else None
            
            if timer_start_time and sick_leave_start_time:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                timer_start = datetime.fromisoformat(timer_start_time)
                sick_leave_start = datetime.fromisoformat(sick_leave_start_time)
                current_time_dt = current_time
                
                # –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ –¥–æ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
                time_before_sick_leave = (sick_leave_start - timer_start).total_seconds()
                
                # –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ (7 –¥–Ω–µ–π)
                full_timer_duration = 7 * 24 * 60 * 60  # 7 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                full_warning_duration = 6 * 24 * 60 * 60  # 6 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                
                # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
                remaining_removal_time = max(0, full_timer_duration - time_before_sick_leave)
                remaining_warning_time = max(0, full_warning_duration - time_before_sick_leave)
                
                logging.info(f"–†–ê–°–ß–ï–¢ –í–†–ï–ú–ï–ù–ò: –¢–∞–π–º–µ—Ä –Ω–∞—á–∞–ª—Å—è {timer_start}, –±–æ–ª—å–Ω–∏—á–Ω—ã–π –Ω–∞—á–∞–ª—Å—è {sick_leave_start}, –ø—Ä–æ—à–ª–æ {time_before_sick_leave} —Å–µ–∫—É–Ω–¥, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_removal_time} —Å–µ–∫—É–Ω–¥")
                
                if remaining_removal_time > 0:
                    # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
                    warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, remaining_warning_time, timer_start_time))
                    removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, remaining_removal_time, timer_start_time))
                    scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    remaining_days = remaining_removal_time / (24 * 60 * 60)
                    remaining_warning_days = remaining_warning_time / (24 * 60 * 60)
                    
                    try:
                        await msg.reply(f"üí™ **–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!** üéâ\n\n‚è∞ –¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!\n\n‚Ä¢ {remaining_warning_days:.1f} –¥–Ω–µ–π –¥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n‚Ä¢ {remaining_days:.1f} –¥–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è\n\nüí™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!")
                        logging.info(f"–û—Ç–≤–µ—Ç '–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
                    logging.info(f"–¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º {remaining_removal_time} —Å–µ–∫—É–Ω–¥")
                else:
                    # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
                    warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60, current_time.isoformat()))
                    removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60, current_time.isoformat()))
                    scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
                    
                    try:
                        await msg.reply("üí™ **–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!** üéâ\n\n‚è∞ –í—Ä–µ–º—è –Ω–∞ —Ç–∞–π–º–µ—Ä–µ –∏—Å—Ç–µ–∫–ª–æ –≤–æ –≤—Ä–µ–º—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 7 –¥–Ω–µ–π!\n\n‚Ä¢ 6 –¥–Ω–µ–π –¥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n‚Ä¢ 7 –¥–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è\n\nüí™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!")
                        logging.info(f"–û—Ç–≤–µ—Ç '–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
                    logging.info(f"–ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä
                warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60, current_time.isoformat()))
                removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60, current_time.isoformat()))
                scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
                
                try:
                    await msg.reply("üí™ **–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!** üéØ\n\n‚è∞ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–∞–π–º–µ—Ä–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 7 –¥–Ω–µ–π!\n\n‚Ä¢ 6 –¥–Ω–µ–π –¥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n‚Ä¢ 7 –¥–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è\n\nüí™ –¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π `#training_done`!")
                    logging.info(f"–û—Ç–≤–µ—Ç '–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                logging.info(f"–ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–∞–π–º–µ—Ä
            logging.info(f"–û–ë–´–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Ç–∞–π–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")


def cancel_user_removal(user_id: int):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in scheduled_removals:
        tasks = scheduled_removals[user_id]
        if isinstance(tasks, dict):
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º
            tasks["warning"].cancel()
            tasks["removal"].cancel()
        else:
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            tasks.cancel()
        del scheduled_removals[user_id]
        logging.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


async def schedule_user_warning(user_id: int, chat_id: int, username: str, delay_seconds: int, timer_start_time: str = None):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logging.info(f"–§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç {delay_seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        await asyncio.sleep(delay_seconds)
        logging.info(f"–§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: –û—Ç—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–≤–µ—Ä—è–µ–º #training_done")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #training_done –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        async with aiosqlite.connect(DB_NAME) as db:
            if timer_start_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ #training_done, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
                async with db.execute('''
                    SELECT has_training_done FROM message_log 
                    WHERE user_id = ? AND has_training_done = 1 AND last_message > ?
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id, timer_start_time)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
            else:
                # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                async with db.execute('''
                    SELECT has_training_done FROM message_log WHERE user_id = ? AND has_training_done = 1
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        try:
            mention = f"@{username}" if username.startswith("@") else f"@{username}"
            warning_message = f"{mention} ‚ö†Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!**\n\n‚è∞ –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª—Å—è —Ä–æ–≤–Ω–æ 1 –¥–µ–Ω—å!\n\nüí™ –û—Ç–ø—Ä–∞–≤—å `#training_done` –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∏–Ω–∞—á–µ –±—É–¥–µ—à—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞!\n\nüíÄ **–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–µ—Ç!**"
            await bot.send_message(chat_id, warning_message, parse_mode="Markdown")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {user_id}: {e}")
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        logging.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
    finally:
        # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if user_id in scheduled_removals and isinstance(scheduled_removals[user_id], dict):
            if "warning" in scheduled_removals[user_id]:
                del scheduled_removals[user_id]["warning"]


async def schedule_user_removal(user_id: int, chat_id: int, delay_seconds: int, timer_start_time: str = None):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–ø–∏—Å–∞–ª #training_done"""
    try:
        await asyncio.sleep(delay_seconds)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #training_done –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        async with aiosqlite.connect(DB_NAME) as db:
            if timer_start_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ #training_done, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
                async with db.execute('''
                    SELECT has_training_done FROM message_log 
                    WHERE user_id = ? AND has_training_done = 1 AND last_message > ?
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id, timer_start_time)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, –Ω–µ —É–¥–∞–ª—è–µ–º
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
            else:
                # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                async with db.execute('''
                    SELECT has_training_done FROM message_log WHERE user_id = ? AND has_training_done = 1
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done, –Ω–µ —É–¥–∞–ª—è–µ–º
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–ø–∏—Å–∞–ª #training_done, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        try:
            await bot.ban_chat_member(chat_id, user_id)
            await bot.unban_chat_member(chat_id, user_id)  # —á—Ç–æ–±—ã –º–æ–≥–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            removal_message = f"‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞!**\n\n‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `#training_done`\n\nüîÑ –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç, –Ω–æ –ø–æ–º–Ω–∏ –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞!"
            await bot.send_message(chat_id, removal_message, parse_mode="Markdown")
            
            logging.info(f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ #training_done")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user_id}: {e}")
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
    finally:
        # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if user_id in scheduled_removals:
            if isinstance(scheduled_removals[user_id], dict):
                if "removal" in scheduled_removals[user_id]:
                    del scheduled_removals[user_id]["removal"]
            else:
                del scheduled_removals[user_id]


async def main():
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logging.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
    asyncio.run(main())
