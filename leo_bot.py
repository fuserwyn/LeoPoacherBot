import asyncio
import logging
import os
from datetime import datetime, timedelta

import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ChatMemberStatus
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
scheduled_removals = {}

DB_NAME = "training.db"


async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS training_log (
                user_id INTEGER PRIMARY KEY,
                last_report TEXT
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS message_log (
                user_id INTEGER,
                chat_id INTEGER,
                last_message TEXT,
                has_training_done BOOLEAN DEFAULT FALSE,
                PRIMARY KEY (user_id, chat_id)
            )
        ''')
        await db.commit()


@dp.chat_member()
async def handle_chat_member_updated(event: types.ChatMemberUpdated):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç"""
    if event.new_chat_member.status == ChatMemberStatus.MEMBER:
        user_id = event.new_chat_member.user.id
        chat_id = event.chat.id
        username = event.new_chat_member.user.username or event.new_chat_member.user.first_name
        
        logging.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {user_id} (@{username})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        try:
            welcome_message = f"üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!**\n\nü§ñ **–Ø Fat Leopard - –≤–∞—à —Ç—Ä–µ–Ω–µ—Ä!**\n\n‚è∞ **–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!**\n‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å **7 –¥–Ω–µ–π** —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å `#training_done`\n‚Ä¢ –ß–µ—Ä–µ–∑ **6 –¥–Ω–µ–π** –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n‚Ä¢ –ß–µ—Ä–µ–∑ **7 –¥–Ω–µ–π** –±–µ–∑ –æ—Ç—á–µ—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞\n\nüí™ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ `#training_done` –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**"
            
            await bot.send_message(chat_id, welcome_message, parse_mode="Markdown")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id} (@{username})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        logging.info(f"‚è∞ –ó–ê–ü–£–°–ö –¢–ê–ô–ú–ï–†–ê –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} (@{username})")
        warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60))  # 6 –¥–Ω–µ–π = 6 * 24 * 60 * 60 —Å–µ–∫—É–Ω–¥
        removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60))  # 7 –¥–Ω–µ–π = 7 * 24 * 60 * 60 —Å–µ–∫—É–Ω–¥
        scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
        logging.info(f"‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} (@{username}) - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 6 –¥–Ω–µ–π, —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")


@dp.message()
async def handle_message(msg: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    if msg.text and msg.text.startswith("/help"):
        help_text = """
ü§ñ **LeoPoacherBot - –ö–æ–º–∞–Ω–¥—ã:**

üí™ **–û—Ç—á–µ—Ç—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:**
‚Ä¢ `#training_done` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

‚è∞ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ `#training_done` —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π –±–µ–∑ `#training_done` - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ `#training_done` - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞

üîß **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""
        await msg.reply(help_text, parse_mode="Markdown")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    chat_id = msg.chat.id
    user_id = msg.from_user.id
    current_time = datetime.utcnow()
    has_training_done = msg.text and "#training_done" in msg.text.lower()
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{msg.text}' (has_training_done: {has_training_done})")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await db.execute('''
                INSERT OR REPLACE INTO message_log (user_id, chat_id, last_message, has_training_done)
                VALUES (?, ?, ?, ?)
            ''', (user_id, chat_id, current_time.isoformat(), has_training_done))
            await db.commit()
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in scheduled_removals:
        username = msg.from_user.username or msg.from_user.first_name
        logging.info(f"üÜï –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
        warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60))  # 6 –¥–Ω–µ–π
        removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60))  # 7 –¥–Ω–µ–π
        scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
        logging.info(f"‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            welcome_message = f"üëã **–ü—Ä–∏–≤–µ—Ç, @{username}!**\n\nü§ñ **–Ø Fat Leopard - –≤–∞—à —Ç—Ä–µ–Ω–µ—Ä!**\n\n‚è∞ **–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!**\n‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å **7 –¥–Ω–µ–π** —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å `#training_done`\n‚Ä¢ –ß–µ—Ä–µ–∑ **6 –¥–Ω–µ–π** –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n‚Ä¢ –ß–µ—Ä–µ–∑ **7 –¥–Ω–µ–π** –±–µ–∑ –æ—Ç—á–µ—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞\n\nüí™ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ `#training_done` –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**"
            await bot.send_message(chat_id, welcome_message, parse_mode="Markdown")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (@{username})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    if has_training_done:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ training_log
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute('''
                INSERT OR REPLACE INTO training_log (user_id, last_report)
                VALUES (?, ?)
            ''', (user_id, current_time.isoformat()))
            await db.commit()
        logging.info(f"–û—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            await msg.reply("‚úÖ **–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç!** üí™\n\n‚è∞ –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π\n\nüéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å `#training_done`!")
            logging.info(f"–û—Ç–≤–µ—Ç '–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ #training_done
        username = msg.from_user.username or msg.from_user.first_name
        timer_start_time = current_time.isoformat()
        logging.info(f"–ó–ê–ü–£–°–ö –ù–û–í–û–ì–û –¢–ê–ô–ú–ï–†–ê: –ü–æ—Å–ª–µ #training_done –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")
        warning_task = asyncio.create_task(schedule_user_warning(user_id, chat_id, username, 6 * 24 * 60 * 60, timer_start_time))  # 6 –¥–Ω–µ–π
        removal_task = asyncio.create_task(schedule_user_removal(user_id, chat_id, 7 * 24 * 60 * 60, timer_start_time))  # 7 –¥–Ω–µ–π
        scheduled_removals[user_id] = {"warning": warning_task, "removal": removal_task}
        logging.info(f"–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 6 –¥–Ω–µ–π, —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")
    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–∞–π–º–µ—Ä
        logging.info(f"–û–ë–´–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Ç–∞–π–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")


def cancel_user_removal(user_id: int):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in scheduled_removals:
        tasks = scheduled_removals[user_id]
        if isinstance(tasks, dict):
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º
            tasks["warning"].cancel()
            tasks["removal"].cancel()
        else:
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            tasks.cancel()
        del scheduled_removals[user_id]
        logging.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


async def schedule_user_warning(user_id: int, chat_id: int, username: str, delay_seconds: int, timer_start_time: str = None):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logging.info(f"–§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç {delay_seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        await asyncio.sleep(delay_seconds)
        logging.info(f"–§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: –û—Ç—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–≤–µ—Ä—è–µ–º #training_done")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #training_done –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        async with aiosqlite.connect(DB_NAME) as db:
            if timer_start_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ #training_done, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
                async with db.execute('''
                    SELECT has_training_done FROM message_log 
                    WHERE user_id = ? AND has_training_done = 1 AND last_message > ?
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id, timer_start_time)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
            else:
                # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                async with db.execute('''
                    SELECT has_training_done FROM message_log WHERE user_id = ? AND has_training_done = 1
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        try:
            mention = f"@{username}" if username.startswith("@") else f"@{username}"
            warning_message = f"{mention} ‚ö†Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!**\n\n‚è∞ –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª—Å—è —Ä–æ–≤–Ω–æ 1 –¥–µ–Ω—å!\n\nüí™ –û—Ç–ø—Ä–∞–≤—å `#training_done` –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∏–Ω–∞—á–µ –±—É–¥–µ—à—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞!\n\nüíÄ **–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–µ—Ç!**"
            await bot.send_message(chat_id, warning_message, parse_mode="Markdown")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {user_id}: {e}")
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        logging.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
    finally:
        # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if user_id in scheduled_removals and isinstance(scheduled_removals[user_id], dict):
            if "warning" in scheduled_removals[user_id]:
                del scheduled_removals[user_id]["warning"]


async def schedule_user_removal(user_id: int, chat_id: int, delay_seconds: int, timer_start_time: str = None):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–ø–∏—Å–∞–ª #training_done"""
    try:
        await asyncio.sleep(delay_seconds)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #training_done –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        async with aiosqlite.connect(DB_NAME) as db:
            if timer_start_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ #training_done, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
                async with db.execute('''
                    SELECT has_training_done FROM message_log 
                    WHERE user_id = ? AND has_training_done = 1 AND last_message > ?
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id, timer_start_time)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, –Ω–µ —É–¥–∞–ª—è–µ–º
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
            else:
                # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                async with db.execute('''
                    SELECT has_training_done FROM message_log WHERE user_id = ? AND has_training_done = 1
                    ORDER BY last_message DESC LIMIT 1
                ''', (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª #training_done, –Ω–µ —É–¥–∞–ª—è–µ–º
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª #training_done, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–ø–∏—Å–∞–ª #training_done, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        try:
            await bot.ban_chat_member(chat_id, user_id)
            await bot.unban_chat_member(chat_id, user_id)  # —á—Ç–æ–±—ã –º–æ–≥–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            removal_message = f"‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞!**\n\n‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `#training_done`\n\nüîÑ –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç, –Ω–æ –ø–æ–º–Ω–∏ –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞!"
            await bot.send_message(chat_id, removal_message, parse_mode="Markdown")
            
            logging.info(f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ #training_done")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user_id}: {e}")
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
    finally:
        # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if user_id in scheduled_removals:
            if isinstance(scheduled_removals[user_id], dict):
                if "removal" in scheduled_removals[user_id]:
                    del scheduled_removals[user_id]["removal"]
            else:
                del scheduled_removals[user_id]


async def main():
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logging.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
    asyncio.run(main())
