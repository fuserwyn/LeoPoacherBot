package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"leo-bot/internal/config"
	"leo-bot/internal/database"
	"leo-bot/internal/logger"
	"leo-bot/internal/models"
	"leo-bot/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api    *tgbotapi.BotAPI
	db     *database.Database
	logger logger.Logger
	config *config.Config
	timers map[int64]*models.TimerInfo
}

func New(cfg *config.Config, db *database.Database, log logger.Logger) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(cfg.APIToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := db.CreateTables(); err != nil {
		return nil, fmt.Errorf("failed to create tables: %w", err)
	}

	return &Bot{
		api:    api,
		db:     db,
		logger: log,
		config: cfg,
		timers: make(map[int64]*models.TimerInfo),
	}, nil
}

func (b *Bot) Start(ctx context.Context) error {
	b.logger.Info("Starting bot...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			go b.handleUpdate(update)
		case <-ctx.Done():
			b.logger.Info("Bot stopped")
			return nil
		}
	}
}

func (b *Bot) handleUpdate(update tgbotapi.Update) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	if update.Message != nil && len(update.Message.NewChatMembers) > 0 {
		b.handleNewChatMembers(update.Message)
		return
	}

	if update.Message == nil {
		return
	}

	msg := update.Message
	b.logger.Infof("Received message from %d: %s", msg.From.ID, msg.Text)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if msg.IsCommand() {
		b.handleCommand(msg)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.handleMessage(msg)
}

func (b *Bot) handleCommand(msg *tgbotapi.Message) {
	command := msg.Command()
	_ = msg.CommandArguments() // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞

	switch command {
	case "start":
		b.handleStart(msg)
	case "start_timer":
		b.handleStartTimer(msg)
	case "help":
		b.handleHelp(msg)
	case "db":
		b.handleDB(msg)
	case "top":
		b.handleTop(msg)
	case "points":
		b.handlePoints(msg)
	case "cups":
		b.handleCups(msg)
	case "send_to_chat":
		b.handleSendToChat(msg)
	default:
		b.logger.Warnf("Unknown command: %s", command)
	}
}

func (b *Bot) handleNewChatMembers(msg *tgbotapi.Message) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	for _, newMember := range msg.NewChatMembers {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
		if newMember.IsBot {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		username := ""
		if newMember.UserName != "" {
			username = "@" + newMember.UserName
		} else if newMember.FirstName != "" {
			username = newMember.FirstName
			if newMember.LastName != "" {
				username += " " + newMember.LastName
			}
		} else {
			username = fmt.Sprintf("User%d", newMember.ID)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		b.sendWelcomeMessage(msg.Chat.ID, username, newMember.ID)
	}
}

func (b *Bot) sendWelcomeMessage(chatID int64, username string, userID int64) {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	welcomeText := fmt.Sprintf(`%s, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—é! ü¶Å

–Ø –≤–∞—à —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –≤—Å–µ–≥–¥–∞, —è –≤—Å–µ –≤–∏–∂—É –∏ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é –≤ —Å—Ç–∞–µ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ 7 –¥–Ω–µ–π!

üí™ –û—Ç—á–µ—Ç—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:
‚Ä¢ #training_done ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π:
‚Ä¢ #sick_leave ‚Äî –í–∑—è—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π (–ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä)
‚Ä¢ #healthy ‚Äî –í—ã–∑–¥–æ—Ä–æ–≤–µ—Ç—å (–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä)

‚è∞ –ö–∞–∫ —è —Å–ª–µ–∂—É –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏:
‚Ä¢ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ #training_done —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π –±–µ–∑ #training_done - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ #training_done - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞

üìã –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –û—Ç—á—ë—Ç–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–æ–º #training_done
‚Ä¢ –ï—Å–ª–∏ –∑–∞–±–æ–ª–µ–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å #sick_leave
‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤—å #healthy
‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á—ë—Ç–∞ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á—ë—Ç–∞ ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞

ü¶Å`, username)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	reply := tgbotapi.NewMessage(chatID, welcomeText)

	b.logger.Infof("Sending welcome message to chat %d for new user %s (ID: %d)", chatID, username, userID)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send welcome message: %v", err)
	} else {
		b.logger.Infof("Successfully sent welcome message to chat %d for new user %s", chatID, username)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.startTimer(userID, chatID, username)
}

func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏
	text := msg.Text
	if text == "" && msg.Caption != "" {
		text = msg.Caption
	}

	hasTrainingDone := strings.Contains(strings.ToLower(text), "#training_done")
	hasSickLeave := strings.Contains(strings.ToLower(text), "#sick_leave")
	hasHealthy := strings.Contains(strings.ToLower(text), "#healthy")

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	username := ""
	if msg.From.UserName != "" {
		username = "@" + msg.From.UserName
	} else if msg.From.FirstName != "" {
		username = msg.From.FirstName
		if msg.From.LastName != "" {
			username += " " + msg.From.LastName
		}
	} else {
		username = fmt.Sprintf("User%d", msg.From.ID)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	existingLog, err := b.db.GetMessageLog(msg.From.ID, msg.Chat.ID)
	if err != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
		messageLog := &models.MessageLog{
			UserID:          msg.From.ID,
			ChatID:          msg.Chat.ID,
			Username:        username,
			Calories:        0,
			StreakDays:      0,
			LastMessage:     utils.FormatMoscowTime(utils.GetMoscowTime()),
			HasTrainingDone: hasTrainingDone,
			HasSickLeave:    hasSickLeave,
			HasHealthy:      hasHealthy,
			IsDeleted:       false,
		}

		if err := b.db.SaveMessageLog(messageLog); err != nil {
			b.logger.Errorf("Failed to save message log: %v", err)
		}
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è streak –¥–∞–Ω–Ω—ã–µ
		existingLog.Username = username
		existingLog.LastMessage = utils.FormatMoscowTime(utils.GetMoscowTime())
		existingLog.HasTrainingDone = hasTrainingDone
		existingLog.HasSickLeave = hasSickLeave
		existingLog.HasHealthy = hasHealthy
		existingLog.IsDeleted = false

		if err := b.db.SaveMessageLog(existingLog); err != nil {
			b.logger.Errorf("Failed to update message log: %v", err)
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
	if hasTrainingDone {
		b.handleTrainingDone(msg)
	} else if hasSickLeave {
		b.handleSickLeave(msg)
	} else if hasHealthy {
		b.handleHealthy(msg)
	}
}

func (b *Bot) handleTrainingDone(msg *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	username := ""
	if msg.From.UserName != "" {
		username = "@" + msg.From.UserName
	} else if msg.From.FirstName != "" {
		username = msg.From.FirstName
		if msg.From.LastName != "" {
			username += " " + msg.From.LastName
		}
	} else {
		username = fmt.Sprintf("User%d", msg.From.ID)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
	trainingLog := &models.TrainingLog{
		UserID:     msg.From.ID,
		Username:   username,
		LastReport: utils.FormatMoscowTime(utils.GetMoscowTime()),
	}

	if err := b.db.SaveTrainingLog(trainingLog); err != nil {
		b.logger.Errorf("Failed to save training log: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	messageLog, err := b.db.GetMessageLog(msg.From.ID, msg.Chat.ID)
	if err != nil {
		b.logger.Errorf("Failed to get message log: %v", err)
		return
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ —Å–µ—Ä–∏—é
	caloriesToAdd, newStreakDays, weeklyAchievement, twoWeekAchievement, threeWeekAchievement, monthlyAchievement, quarterlyAchievement := b.calculateCalories(messageLog)

	// –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
	b.logger.Infof("DEBUG handleTrainingDone: caloriesToAdd=%d, newStreakDays=%d", caloriesToAdd, newStreakDays)

	// –ù–∞—á–∏—Å–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏
	if err := b.db.AddCalories(msg.From.ID, msg.Chat.ID, caloriesToAdd); err != nil {
		b.logger.Errorf("Failed to add calories: %v", err)
	} else {
		b.logger.Infof("DEBUG: Successfully added %d calories", caloriesToAdd)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
	if caloriesToAdd > 0 {
		today := utils.GetMoscowDate()
		b.logger.Infof("DEBUG: Updating streak to %d with date %s", newStreakDays, today)
		if err := b.db.UpdateStreak(msg.From.ID, msg.Chat.ID, newStreakDays, today); err != nil {
			b.logger.Errorf("Failed to update streak: %v", err)
		} else {
			b.logger.Infof("DEBUG: Successfully updated streak to %d", newStreakDays)
		}
	} else {
		b.logger.Infof("DEBUG: Skipping streak update (caloriesToAdd = 0)")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º
	wasOnSickLeave := messageLog.HasSickLeave && !messageLog.HasHealthy

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
	if caloriesToAdd > 0 {
		// –ù–∞—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 42 –∫—É–±–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é
		if weeklyAchievement {
			if err := b.db.AddCups(msg.From.ID, msg.Chat.ID, 42); err != nil {
				b.logger.Errorf("Failed to add weekly cups: %v", err)
			} else {
				b.logger.Infof("Successfully added 42 cups for weekly achievement")
			}
			b.sendWeeklyCupsReward(msg, username, newStreakDays)
		}

		// –ù–∞—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 42 –∫—É–±–∫–∞ –∑–∞ –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é
		if twoWeekAchievement {
			if err := b.db.AddCups(msg.From.ID, msg.Chat.ID, 42); err != nil {
				b.logger.Errorf("Failed to add two-week cups: %v", err)
			} else {
				b.logger.Infof("Successfully added 42 cups for two-week achievement")
			}
			b.sendTwoWeekCupsReward(msg, username, newStreakDays)
		}

		// –ù–∞—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 42 –∫—É–±–∫–∞ –∑–∞ —Ç—Ä–µ—Ö–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é
		if threeWeekAchievement {
			if err := b.db.AddCups(msg.From.ID, msg.Chat.ID, 42); err != nil {
				b.logger.Errorf("Failed to add three-week cups: %v", err)
			} else {
				b.logger.Infof("Successfully added 42 cups for three-week achievement")
			}
			b.sendThreeWeekCupsReward(msg, username, newStreakDays)
		}

		// –ù–∞—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 420 –∫—É–±–∫–æ–≤ –∑–∞ –º–µ—Å—è—á–Ω—É—é —Å–µ—Ä–∏—é
		if monthlyAchievement {
			if err := b.db.AddCups(msg.From.ID, msg.Chat.ID, 420); err != nil {
				b.logger.Errorf("Failed to add monthly cups: %v", err)
			} else {
				b.logger.Infof("Successfully added 420 cups for monthly achievement")
			}
			b.sendMonthlyCupsReward(msg, username, newStreakDays)
		}

		// –ù–∞—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 4200 –∫—É–±–∫–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—É—é —Å–µ—Ä–∏—é
		if quarterlyAchievement {
			if err := b.db.AddCups(msg.From.ID, msg.Chat.ID, 4200); err != nil {
				b.logger.Errorf("Failed to add quarterly cups: %v", err)
			} else {
				b.logger.Infof("Successfully added 4200 cups for quarterly achievement")
			}
			b.sendQuarterlyCupsReward(msg, username, newStreakDays)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–ø–µ—Ä-—É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—É–±–∫–æ–≤
		totalCups, err := b.db.GetUserCups(msg.From.ID, msg.Chat.ID)
		if err != nil {
			b.logger.Errorf("Failed to get user cups for super level check: %v", err)
		} else if totalCups > 420 {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–ø–µ—Ä-—É—Ä–æ–≤–Ω–µ
			b.sendSuperLevelMessage(msg, username, totalCups)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
	// –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—É–±–∫–∞—Ö
	if caloriesToAdd > 0 && !weeklyAchievement && !twoWeekAchievement && !threeWeekAchievement && !monthlyAchievement && !quarterlyAchievement {
		reply := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç! üí™\n\nü¶Å –¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: %d\n\n‚è∞ –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 7 –¥–Ω–µ–π\n\nüéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å #training_done!", newStreakDays))

		b.logger.Infof("Sending training done message to chat %d", msg.Chat.ID)
		_, err = b.api.Send(reply)
		if err != nil {
			b.logger.Errorf("Failed to send training done message: %v", err)
		} else {
			b.logger.Infof("Successfully sent training done message to chat %d", msg.Chat.ID)
		}
	} else if caloriesToAdd == 0 {
		// –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		reply := tgbotapi.NewMessage(msg.Chat.ID, "ü¶Å –ö–∞–∫–æ–π –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–µ–æ–ø–∞—Ä–¥! –ï—â–µ –æ–¥–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è! üí™\n\nüî• –¢–≤–æ—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç\n\n‚è∞ –¢–∞–π–º–µ—Ä —É–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π\n\nüéØ –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π #training_done –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–µ—Ä–∏–∏!")

		b.logger.Infof("Sending already trained today message to chat %d", msg.Chat.ID)
		_, err = b.api.Send(reply)
		if err != nil {
			b.logger.Errorf("Failed to send already trained today message: %v", err)
		} else {
			b.logger.Infof("Successfully sent already trained today message to chat %d", msg.Chat.ID)
		}
	}
	// –ï—Å–ª–∏ caloriesToAdd > 0 –ò –µ—Å—Ç—å achievement (–∫—É–±–∫–∏), —Ç–æ –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–¥–æ—Ä–æ–≤–æ–≥–æ
	if wasOnSickLeave {
		messageLog.HasSickLeave = false
		messageLog.HasHealthy = true
		messageLog.SickLeaveStartTime = nil
		if err := b.db.SaveMessageLog(messageLog); err != nil {
			b.logger.Errorf("Failed to reset sick leave flags: %v", err)
		}
		b.logger.Infof("Reset sick leave flags and marked as healthy for user %d (%s) after training during sick leave", msg.From.ID, username)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
	b.startTimer(msg.From.ID, msg.Chat.ID, msg.From.UserName)
}

func (b *Bot) handleSickLeave(msg *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	messageLog, err := b.db.GetMessageLog(msg.From.ID, msg.Chat.ID)
	if err != nil {
		b.logger.Errorf("Failed to get message log: %v", err)
		return
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
	sickLeaveStartTime := utils.FormatMoscowTime(utils.GetMoscowTime())
	messageLog.SickLeaveStartTime = &sickLeaveStartTime
	b.logger.Infof("Set sick leave start time: %s", sickLeaveStartTime)

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
	fullTimerDuration := 2 * time.Minute // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	var remainingTime time.Duration

	if messageLog.TimerStartTime != nil {
		timerStart, err := utils.ParseMoscowTime(*messageLog.TimerStartTime)
		if err == nil {
			sickStart, err := utils.ParseMoscowTime(sickLeaveStartTime)
			if err == nil {
				// –í—Ä–µ–º—è —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–∑–Ω–∏
				timeFromTrainingToSick := sickStart.Sub(timerStart)
				// –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è = –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ –±–æ–ª–µ–∑–Ω–∏
				remainingTime = fullTimerDuration - timeFromTrainingToSick
				if remainingTime <= 0 {
					remainingTime = 0
				}
				b.logger.Infof("Timer start: %v, sick start: %v, time from training to sick: %v, remaining time: %v", timerStart, sickStart, timeFromTrainingToSick, remainingTime)
			} else {
				remainingTime = fullTimerDuration
				b.logger.Errorf("Failed to parse sick start time: %v", err)
			}
		} else {
			remainingTime = fullTimerDuration
			b.logger.Errorf("Failed to parse timer start time: %v", err)
		}
	} else {
		remainingTime = fullTimerDuration
		b.logger.Warnf("Timer start time is nil, using full duration")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
	restTimeStr := remainingTime.String()
	messageLog.RestTimeTillDel = &restTimeStr
	b.logger.Infof("Saved rest time till deletion: %s", restTimeStr)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
	messageLog.HasSickLeave = true
	messageLog.HasHealthy = false

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
	b.logger.Infof("Saving message log with fields:")
	b.logger.Infof("  UserID: %d", messageLog.UserID)
	b.logger.Infof("  ChatID: %d", messageLog.ChatID)
	b.logger.Infof("  HasSickLeave: %t", messageLog.HasSickLeave)
	b.logger.Infof("  HasHealthy: %t", messageLog.HasHealthy)
	b.logger.Infof("  SickLeaveStartTime: %s", func() string {
		if messageLog.SickLeaveStartTime != nil {
			return *messageLog.SickLeaveStartTime
		}
		return "nil"
	}())
	b.logger.Infof("  RestTimeTillDel: %s", func() string {
		if messageLog.RestTimeTillDel != nil {
			return *messageLog.RestTimeTillDel
		}
		return "nil"
	}())

	if err := b.db.SaveMessageLog(messageLog); err != nil {
		b.logger.Errorf("Failed to update message log: %v", err)
	} else {
		b.logger.Infof("Successfully saved sick leave start time")
	}

	// –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
	b.cancelTimer(msg.From.ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	reply := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ø—Ä–∏–Ω—è—Ç! ü§í\n\n‚è∏Ô∏è –¢–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤—Ä–µ–º—è –±–æ–ª–µ–∑–Ω–∏\n\nüí™ –í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!\n\nüìù –ö–æ–≥–¥–∞ –ø–æ–ø—Ä–∞–≤–∏—à—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å #healthy –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"))

	b.logger.Infof("Sending sick leave message to chat %d", msg.Chat.ID)
	_, err = b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send sick leave message: %v", err)
	} else {
		b.logger.Infof("Successfully sent sick leave message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleHealthy(msg *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–µ—Ä–∞ –∏ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
	messageLog, err := b.db.GetMessageLog(msg.From.ID, msg.Chat.ID)
	if err != nil {
		b.logger.Errorf("Failed to get message log: %v", err)
		return
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
	sickLeaveEndTime := utils.FormatMoscowTime(utils.GetMoscowTime())
	messageLog.SickLeaveEndTime = &sickLeaveEndTime
	b.logger.Infof("Set sick leave end time: %s", sickLeaveEndTime)

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –±–æ–ª–µ–∑–Ω–∏
	if messageLog.SickLeaveStartTime != nil {
		b.logger.Infof("Sick leave start time: %s", *messageLog.SickLeaveStartTime)
		sickStart, err := utils.ParseMoscowTime(*messageLog.SickLeaveStartTime)
		if err == nil {
			sickEnd, err := utils.ParseMoscowTime(sickLeaveEndTime)
			if err == nil {
				sickDuration := sickEnd.Sub(sickStart)
				sickTimeStr := sickDuration.String()
				messageLog.SickTime = &sickTimeStr
				b.logger.Infof("Calculated sick time: %v (%s)", sickDuration, sickTimeStr)
			} else {
				b.logger.Errorf("Failed to parse sick end time: %v", err)
			}
		} else {
			b.logger.Errorf("Failed to parse sick start time: %v", err)
		}
	} else {
		b.logger.Warnf("Sick leave start time is nil")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è
	messageLog.HasHealthy = true

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
	b.logger.Infof("Saving message log with fields:")
	b.logger.Infof("  UserID: %d", messageLog.UserID)
	b.logger.Infof("  ChatID: %d", messageLog.ChatID)
	b.logger.Infof("  HasSickLeave: %t", messageLog.HasSickLeave)
	b.logger.Infof("  HasHealthy: %t", messageLog.HasHealthy)
	b.logger.Infof("  SickLeaveStartTime: %s", func() string {
		if messageLog.SickLeaveStartTime != nil {
			return *messageLog.SickLeaveStartTime
		}
		return "nil"
	}())
	b.logger.Infof("  SickLeaveEndTime: %s", func() string {
		if messageLog.SickLeaveEndTime != nil {
			return *messageLog.SickLeaveEndTime
		}
		return "nil"
	}())
	b.logger.Infof("  SickTime: %s", func() string {
		if messageLog.SickTime != nil {
			return *messageLog.SickTime
		}
		return "nil"
	}())
	b.logger.Infof("  RestTimeTillDel: %s", func() string {
		if messageLog.RestTimeTillDel != nil {
			return *messageLog.RestTimeTillDel
		}
		return "nil"
	}())

	if err := b.db.SaveMessageLog(messageLog); err != nil {
		b.logger.Errorf("Failed to update message log: %v", err)
	} else {
		b.logger.Infof("Successfully saved message log with sick leave data")
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
	var remainingTime time.Duration
	if messageLog.RestTimeTillDel != nil {
		// –ü–∞—Ä—Å–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
		restTimeStr := *messageLog.RestTimeTillDel
		b.logger.Infof("Parsing rest time: %s", restTimeStr)
		// –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç "1m30s")
		if strings.Contains(restTimeStr, "m") {
			parts := strings.Split(restTimeStr, "m")
			if len(parts) == 2 {
				minutes, _ := strconv.Atoi(parts[0])
				secondsStr := strings.TrimSuffix(parts[1], "s")
				seconds, _ := strconv.Atoi(secondsStr)
				remainingTime = time.Duration(minutes)*time.Minute + time.Duration(seconds)*time.Second
				b.logger.Infof("Parsed rest time: %dm %ds = %v", minutes, seconds, remainingTime)
			}
		} else if strings.Contains(restTimeStr, "s") {
			secondsStr := strings.TrimSuffix(restTimeStr, "s")
			seconds, _ := strconv.Atoi(secondsStr)
			remainingTime = time.Duration(seconds) * time.Second
			b.logger.Infof("Parsed rest time: %ds = %v", seconds, remainingTime)
		}
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–∞–π–º–µ—Ä
		remainingTime = 7 * 24 * time.Hour
		b.logger.Warnf("No rest time saved, using full timer: %v", remainingTime)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
	if remainingTime <= 0 {
		// –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		username := ""
		if msg.From.UserName != "" {
			username = "@" + msg.From.UserName
		} else if msg.From.FirstName != "" {
			username = msg.From.FirstName
			if msg.From.LastName != "" {
				username += " " + msg.From.LastName
			}
		} else {
			username = fmt.Sprintf("User%d", msg.From.ID)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! üö´\n\nüí™ –í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ.\n\nü¶Å –Ø –ø–∏—Ç–∞—é—Å—å –ª–µ–Ω–∏–≤—ã–º–∏ –ª–µ–æ–ø–∞—Ä–¥–∞–º–∏ –∏ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∂–∏—Ä–Ω–µ–µ!\n\nüí™ –¢—ã –≤–µ–¥—å –Ω–µ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∫–∞–∫ —è?\n\n–¢–æ–≥–¥–∞ —Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç—á–µ—Ç—ã!")
		b.api.Send(reply)

		// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.removeUser(msg.From.ID, msg.Chat.ID, username)
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
	b.startTimerWithDuration(msg.From.ID, msg.Chat.ID, msg.From.UserName, remainingTime)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	reply := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("üí™ –í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! üéâ\n\n‚è∞ –¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!"))

	b.logger.Infof("Sending healthy message to chat %d", msg.Chat.ID)
	_, err = b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send healthy message: %v", err)
	} else {
		b.logger.Infof("Successfully sent healthy message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleStartTimer(msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !b.isAdmin(msg.Chat.ID, msg.From.ID) {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
		b.api.Send(reply)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
	users, err := b.db.GetUsersByChatID(msg.Chat.ID)
	if err != nil {
		b.logger.Errorf("Failed to get users: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		b.api.Send(reply)
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	startedCount := 0
	for _, user := range users {
		if b.isUserInChat(msg.Chat.ID, user.UserID) {
			b.startTimer(user.UserID, msg.Chat.ID, "")
			startedCount++
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	reply := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("üêÜ Fat Leopard –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n‚è±Ô∏è –ó–∞–ø—É—â–µ–Ω–æ —Ç–∞–π–º–µ—Ä–æ–≤: %d\n‚è∞ –í—Ä–µ–º—è: 7 –¥–Ω–µ–π\nüí™ –î–µ–π—Å—Ç–≤–∏–µ: –û—Ç–ø—Ä–∞–≤—å #training_done", startedCount))

	b.logger.Infof("Sending start timer message to chat %d", msg.Chat.ID)
	_, err = b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send start timer message: %v", err)
	} else {
		b.logger.Infof("Successfully sent start timer message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleHelp(msg *tgbotapi.Message) {
	helpText := `ü§ñ LeoPoacherBot - –ö–æ–º–∞–Ω–¥—ã:

üìù –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
‚Ä¢ /start_timer ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /db ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
‚Ä¢ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üèÜ –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
‚Ä¢ /top ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
‚Ä¢ /points ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–∞–ª–æ—Ä–∏–∏
‚Ä¢ /cups ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫—É–±–∫–∏

üí™ –û—Ç—á–µ—Ç—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:
‚Ä¢ #training_done ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π:
‚Ä¢ #sick_leave ‚Äî –í–∑—è—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π (–ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä)
‚Ä¢ #healthy ‚Äî –í—ã–∑–¥–æ—Ä–æ–≤–µ—Ç—å (–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä)

‚è∞ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:
‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ #training_done —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π –±–µ–∑ #training_done - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ #training_done - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
‚Ä¢ üèÜ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 42 –ö–£–ë–ö–ê! üèÜ
‚Ä¢ üèÜüèÜ 14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 42 –ö–£–ë–ö–ê! üèÜüèÜ
‚Ä¢ üèÜüèÜüèÜ 21 –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥ = 42 –ö–£–ë–ö–ê! üèÜüèÜüèÜ
‚Ä¢ üèÜüèÜüèÜ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 420 –ö–£–ë–ö–û–í! üèÜüèÜüèÜ
‚Ä¢ üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ 90 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 4200 –ö–£–ë–ö–û–í! üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

üìã –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –û—Ç—á—ë—Ç–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–æ–º #training_done
‚Ä¢ –ï—Å–ª–∏ –∑–∞–±–æ–ª–µ–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å #sick_leave
‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤—å #healthy
‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á—ë—Ç–∞ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á—ë—Ç–∞ ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞

–û—Å—Ç–∞–≤–∞–π—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –∂–∏—Ä–Ω—ã–º –ª–µ–æ–ø–∞—Ä–¥–æ–º! ü¶Å`

	reply := tgbotapi.NewMessage(msg.Chat.ID, helpText)

	b.logger.Infof("Sending help message to chat %d", msg.Chat.ID)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send help message: %v", err)
	} else {
		b.logger.Infof("Successfully sent help message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleStart(msg *tgbotapi.Message) {
	welcomeText := `ü¶Å **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LeoPoacherBot!** ü¶Å

üí™ **–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–µ –∏ –Ω–µ —Å—Ç–∞—Ç—å –∂–∏—Ä–Ω—ã–º –ª–µ–æ–ø–∞—Ä–¥–æ–º!**

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /start_timer ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

üí™ **–û—Ç—á–µ—Ç—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:**
‚Ä¢ #training_done ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

üè• **–ë–æ–ª—å–Ω–∏—á–Ω—ã–π:**
‚Ä¢ #sick_leave ‚Äî –í–∑—è—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π (–ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä)
‚Ä¢ #healthy ‚Äî –í—ã–∑–¥–æ—Ä–æ–≤–µ—Ç—å (–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä)

‚è∞ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ö–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç —Å #training_done –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –ß–µ—Ä–µ–∑ 6 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á–µ—Ç–∞ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –±–µ–∑ –æ—Ç—á–µ—Ç–∞ ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
‚Ä¢ üèÜ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 42 –ö–£–ë–ö–ê! üèÜ
‚Ä¢ üèÜüèÜ 14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 42 –ö–£–ë–ö–ê! üèÜüèÜ
‚Ä¢ üèÜüèÜüèÜ 21 –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥ = 42 –ö–£–ë–ö–ê! üèÜüèÜüèÜ
‚Ä¢ üèÜüèÜüèÜ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 420 –ö–£–ë–ö–û–í! üèÜüèÜüèÜ
‚Ä¢ üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ 90 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = 4200 –ö–£–ë–ö–û–í! üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

üéØ **–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –æ—Ç–ø—Ä–∞–≤—å #training_done!**`

	reply := tgbotapi.NewMessage(msg.Chat.ID, welcomeText)

	b.logger.Infof("Sending start message to chat %d", msg.Chat.ID)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send start message: %v", err)
	} else {
		b.logger.Infof("Successfully sent start message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleDB(msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !b.isAdmin(msg.Chat.ID, msg.From.ID) {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
		b.api.Send(reply)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats, err := b.db.GetDatabaseStats()
	if err != nil {
		b.logger.Errorf("Failed to get database stats: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
		b.api.Send(reply)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	report := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v\n‚úÖ –° training_done: %v\nüè• –ù–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º: %v\nüí™ –í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–∏: %v",
		stats["total_users"], stats["training_done"], stats["sick_leave"], stats["healthy"])

	reply := tgbotapi.NewMessage(msg.Chat.ID, report)

	b.logger.Infof("Sending DB stats message to chat %d", msg.Chat.ID)
	_, err = b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send DB stats message: %v", err)
	} else {
		b.logger.Infof("Successfully sent DB stats message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleTop(msg *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	topUsers, err := b.db.GetTopUsers(msg.Chat.ID, 10)
	if err != nil {
		b.logger.Errorf("Failed to get top users: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
		b.api.Send(reply)
		return
	}

	if len(topUsers) == 0 {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "üèÜ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\nüìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö")
		reply.ParseMode = "Markdown"
		b.api.Send(reply)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø
	topText := "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n\n"
	for i, user := range topUsers {
		emoji := "ü•á"
		if i == 1 {
			emoji = "ü•à"
		} else if i == 2 {
			emoji = "ü•â"
		} else {
			emoji = fmt.Sprintf("%dÔ∏è‚É£", i+1)
		}
		topText += fmt.Sprintf("%s %s - %d –∫–∞–ª–æ—Ä–∏–π\n", emoji, user.Username, user.Calories)
	}

	reply := tgbotapi.NewMessage(msg.Chat.ID, topText)

	b.logger.Infof("Sending top users message to chat %d", msg.Chat.ID)
	_, err = b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send top users message: %v", err)
	} else {
		b.logger.Infof("Successfully sent top users message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handlePoints(msg *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	calories, err := b.db.GetUserCalories(msg.From.ID, msg.Chat.ID)
	if err != nil {
		b.logger.Errorf("Failed to get user calories: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
		b.api.Send(reply)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	username := ""
	if msg.From.UserName != "" {
		username = "@" + msg.From.UserName
	} else if msg.From.FirstName != "" {
		username = msg.From.FirstName
		if msg.From.LastName != "" {
			username += " " + msg.From.LastName
		}
	} else {
		username = fmt.Sprintf("User%d", msg.From.ID)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	caloriesText := fmt.Sprintf("üî• –í–∞—à–∏ –∫–∞–ª–æ—Ä–∏–∏:\n\nüë§ %s\nüéØ –í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: %d\n\nüí° –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ #training_done –¥–ª—è —Å–∂–∏–≥–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π!", username, calories)

	reply := tgbotapi.NewMessage(msg.Chat.ID, caloriesText)

	b.logger.Infof("Sending calories message to chat %d", msg.Chat.ID)
	_, err = b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send calories message: %v", err)
	} else {
		b.logger.Infof("Successfully sent calories message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleCups(msg *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –∫—É–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	cups, err := b.db.GetUserCups(msg.From.ID, msg.Chat.ID)
	if err != nil {
		b.logger.Errorf("Failed to get user cups: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
		b.api.Send(reply)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	username := ""
	if msg.From.UserName != "" {
		username = "@" + msg.From.UserName
	} else if msg.From.FirstName != "" {
		username = msg.From.FirstName
		if msg.From.LastName != "" {
			username += " " + msg.From.LastName
		}
	} else {
		username = fmt.Sprintf("User%d", msg.From.ID)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–±–∫–æ–≤
	var cupsText string
	if cups > 420 {
		cupsText = fmt.Sprintf("üåü‚ö° –°–£–ü–ï–†-–£–†–û–í–ï–ù–¨! ‚ö°üåü\n\nüë§ %s\nüéØ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫—É–±–∫–æ–≤: %d\n\nüéä –í–°–ï –û–ñ–ò–î–ê–ù–ò–Ø –ü–†–ï–í–ó–û–ô–î–ï–ù–´! üéä\n\nü¶Å Fat Leopard –≤ –ø–æ–ª–Ω–æ–º –≤–æ—Å—Ç–æ—Ä–≥–µ!\nüí™ –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–µ–º–ø–∏–æ–Ω - —Ç—ã –°–£–ü–ï–†-–ß–ï–ú–ü–ò–û–ù!\nüî• –¢–≤–æ—è —Å–∏–ª–∞ –∏ –º–æ—â—å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã!\n‚≠êÔ∏è –¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –≤—Å—é —Å—Ç–∞—é!\nüëë –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–∏—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç!\nüåü –¢—ã —Å–∏—è–µ—à—å —è—Ä—á–µ –≤—Å–µ—Ö!\n\nüéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —Å—É–ø–µ—Ä-–ª–µ–æ–ø–∞—Ä–¥!", username, cups)
	} else if cups >= 420 {
		cupsText = fmt.Sprintf("üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéä\n\nüë§ %s\nüéØ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫—É–±–∫–æ–≤: %d\n\nüèÜ –¢–´ –î–û–°–¢–ò–ì –¶–ï–õ–ò –†–û–ó–´–ì–†–´–®–ê!\nüéÅ –£—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Ñ—É—Ç–±–æ–ª–∫–∏ Fat Leopard!\nüí™ –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!\nüî• –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!", username, cups)
	} else {
		cupsText = fmt.Sprintf("üèÜ –í–∞—à–∏ –∫—É–±–∫–∏:\n\nüë§ %s\nüéØ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫—É–±–∫–æ–≤: %d\n\nüí° –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ #training_done –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–±–∫–æ–≤!\n\nüéä –†–æ–∑—ã–≥—Ä—ã—à —Ñ—É—Ç–±–æ–ª–∫–∏ Fat Leopard –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 420 –∫—É–±–∫–æ–≤!", username, cups)
	}

	reply := tgbotapi.NewMessage(msg.Chat.ID, cupsText)

	b.logger.Infof("Sending cups message to chat %d", msg.Chat.ID)
	_, err = b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send cups message: %v", err)
	} else {
		b.logger.Infof("Successfully sent cups message to chat %d", msg.Chat.ID)
	}
}

func (b *Bot) handleSendToChat(msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã
	if msg.From.ID != b.config.OwnerID {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		b.api.Send(reply)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
	args := msg.CommandArguments()
	if args == "" {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to_chat <chat_id> <—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è>")
		b.api.Send(reply)
		return
	}

	// –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	parts := strings.SplitN(args, " ", 2)
	if len(parts) != 2 {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_to_chat <chat_id> <—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è>")
		b.api.Send(reply)
		return
	}

	// –ü–∞—Ä—Å–∏–º chat_id
	chatID, err := strconv.ParseInt(parts[0], 10, 64)
	if err != nil {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
		b.api.Send(reply)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	messageText := parts[1]

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	chatMessage := tgbotapi.NewMessage(chatID, messageText)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
	b.logger.Infof("Sending message to chat %d: %s", chatID, messageText)
	_, err = b.api.Send(chatMessage)
	if err != nil {
		errorMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %d: %v", chatID, err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, errorMsg)
		b.api.Send(reply)
		b.logger.Errorf("Failed to send message to chat %d: %v", chatID, err)
	} else {
		successMsg := fmt.Sprintf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d", chatID)
		reply := tgbotapi.NewMessage(msg.Chat.ID, successMsg)
		b.api.Send(reply)
		b.logger.Infof("Successfully sent message to chat %d", chatID)
	}
}

func (b *Bot) startTimer(userID, chatID int64, username string) {
	// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 6 –¥–Ω–µ–π, —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
	b.startTimerWithDuration(userID, chatID, username, 7*24*time.Hour)
}

func (b *Bot) startTimerWithDuration(userID, chatID int64, username string, duration time.Duration) {
	// –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
	b.cancelTimer(userID)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–π–º–µ—Ä—ã
	warningTask := make(chan bool)
	removalTask := make(chan bool)

	timerStartTime := utils.FormatMoscowTime(utils.GetMoscowTime())
	timerInfo := &models.TimerInfo{
		UserID:         userID,
		ChatID:         chatID,
		Username:       username,
		WarningTask:    warningTask,
		RemovalTask:    removalTask,
		TimerStartTime: timerStartTime,
	}

	b.timers[userID] = timerInfo

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	messageLog, err := b.db.GetMessageLog(userID, chatID)
	if err != nil {
		b.logger.Errorf("Failed to get message log for timer start: %v", err)
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞
		messageLog.TimerStartTime = &timerStartTime
		if err := b.db.SaveMessageLog(messageLog); err != nil {
			b.logger.Errorf("Failed to save timer start time: %v", err)
		} else {
			b.logger.Infof("Saved timer start time: %s", timerStartTime)
		}
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (6 –¥–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è)
	warningTime := duration - 24*time.Hour // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
	if warningTime < 0 {
		warningTime = duration / 2 // Fallback –µ—Å–ª–∏ –≤—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
	go func() {
		time.Sleep(warningTime)
		select {
		case <-warningTask:
			return // –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω
		default:
			b.sendWarning(userID, chatID, username)
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
	go func() {
		time.Sleep(duration)
		select {
		case <-removalTask:
			return // –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω
		default:
			b.removeUser(userID, chatID, username)
		}
	}()

	b.logger.Infof("Started timer for user %d (%s) - warning in %v, removal in %v", userID, username, warningTime, duration)
}

func (b *Bot) cancelTimer(userID int64) {
	if timer, exists := b.timers[userID]; exists {
		close(timer.WarningTask)
		close(timer.RemovalTask)
		delete(b.timers, userID)
		b.logger.Infof("Cancelled timer for user %d", userID)
	}
}

func (b *Bot) sendWarning(userID, chatID int64, username string) {
	message := fmt.Sprintf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n\n@%s, —Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —É–∂–µ 6 –¥–Ω–µ–π!\n\nü¶Å –Ø –ø–∏—Ç–∞—é—Å—å –ª–µ–Ω–∏–≤—ã–º–∏ –ª–µ–æ–ø–∞—Ä–¥–∞–º–∏ –∏ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∂–∏—Ä–Ω–µ–µ!\n\nüí™ –¢—ã –≤–µ–¥—å –Ω–µ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∫–∞–∫ —è?\n\n‚è∞ –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞!\n\nüéØ –û—Ç–ø—Ä–∞–≤—å #training_done –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!", username)

	msg := tgbotapi.NewMessage(chatID, message)
	b.logger.Infof("Sending warning to user %d (%s)", userID, username)
	_, err := b.api.Send(msg)
	if err != nil {
		b.logger.Errorf("Failed to send warning: %v", err)
	} else {
		b.logger.Infof("Successfully sent warning to user %d (%s)", userID, username)
	}
}

func (b *Bot) removeUser(userID, chatID int64, username string) {
	b.logger.Infof("Attempting to remove user %d (%s) from chat %d", userID, username, chatID)

	// –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
	_, err := b.api.Request(tgbotapi.BanChatMemberConfig{
		ChatMemberConfig: tgbotapi.ChatMemberConfig{
			ChatID: chatID,
			UserID: userID,
		},
		UntilDate: time.Now().Add(30 * 24 * time.Hour).Unix(), // –ë–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π
	})

	if err != nil {
		b.logger.Errorf("Failed to remove user %d: %v", userID, err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑ —á–∞—Ç–∞", username))
		b.api.Send(errorMsg)
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
		message := fmt.Sprintf("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!\n\n@%s –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n\nü¶Å –Ø –ø–∏—Ç–∞—é—Å—å –ª–µ–Ω–∏–≤—ã–º–∏ –ª–µ–æ–ø–∞—Ä–¥–∞–º–∏ –∏ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∂–∏—Ä–Ω–µ–µ!\n\nüí™ –¢—ã –≤–µ–¥—å –Ω–µ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∫–∞–∫ —è?\n\n–¢–æ–≥–¥–∞ —Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç—á–µ—Ç—ã!", username)
		msg := tgbotapi.NewMessage(chatID, message)
		b.logger.Infof("Sending removal message for user %d (%s)", userID, username)
		_, sendErr := b.api.Send(msg)
		if sendErr != nil {
			b.logger.Errorf("Failed to send removal message: %v", sendErr)
		} else {
			b.logger.Infof("Successfully sent removal message for user %d (%s)", userID, username)
		}

		b.logger.Infof("Removed user %d (%s) from chat", userID, username)
	}

	// –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := b.db.MarkUserAsDeleted(userID, chatID); err != nil {
		b.logger.Errorf("Failed to mark user as deleted: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
	delete(b.timers, userID)
	b.logger.Infof("Timer removed for user %d", userID)
}

func (b *Bot) isAdmin(chatID, userID int64) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
	if userID == b.config.OwnerID {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	member, err := b.api.GetChatMember(tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: chatID,
			UserID: userID,
		},
	})
	if err != nil {
		b.logger.Errorf("Failed to get chat member: %v", err)
		return false
	}

	return member.Status == "administrator" || member.Status == "creator"
}

func (b *Bot) isUserInChat(chatID, userID int64) bool {
	_, err := b.api.GetChatMember(tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: chatID,
			UserID: userID,
		},
	})
	return err == nil
}

func (b *Bot) calculateCalories(messageLog *models.MessageLog) (int, int, bool, bool, bool, bool, bool) {
	today := utils.GetMoscowDate()

	// –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	b.logger.Infof("DEBUG calculateCalories: today=%s, LastTrainingDate=%v, StreakDays=%d",
		today, messageLog.LastTrainingDate, messageLog.StreakDays)

	// –ë–∞–∑–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
	caloriesToAdd := 1

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è
	if messageLog.LastTrainingDate != nil && *messageLog.LastTrainingDate == today {
		b.logger.Infof("DEBUG: –£–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∫–∞–ª–æ—Ä–∏–π")
		return 0, messageLog.StreakDays, false, false, false, false, false // –£–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
	newStreakDays := 1

	if messageLog.LastTrainingDate != nil {
		yesterday := utils.GetMoscowTime().AddDate(0, 0, -1)
		yesterdayStr := utils.GetMoscowDateFromTime(yesterday)
		b.logger.Infof("DEBUG: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º LastTrainingDate=%s —Å yesterday=%s", *messageLog.LastTrainingDate, yesterdayStr)

		if *messageLog.LastTrainingDate == yesterdayStr {
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é
			newStreakDays = messageLog.StreakDays + 1
			b.logger.Infof("DEBUG: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é: %d + 1 = %d", messageLog.StreakDays, newStreakDays)
		} else {
			// –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
			newStreakDays = 1
			b.logger.Infof("DEBUG: –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ: %d", newStreakDays)
		}
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, –Ω–æ –µ—Å—Ç—å streak, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ
		if messageLog.StreakDays > 0 {
			newStreakDays = messageLog.StreakDays + 1
			b.logger.Infof("DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º streak: %d + 1 = %d", messageLog.StreakDays, newStreakDays)
		}
	}

	// –ë–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏—é
	if newStreakDays >= 30 {
		caloriesToAdd += 20 // 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
	} else if newStreakDays >= 14 {
		caloriesToAdd += 10 // 14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
	} else if newStreakDays >= 7 {
		caloriesToAdd += 5 // 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
	} else if newStreakDays >= 3 {
		caloriesToAdd += 2 // 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥
	}

	// –ë–æ–Ω—É—Å –∑–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
	if messageLog.HasSickLeave && messageLog.HasHealthy {
		caloriesToAdd += 2
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–µ—Ä–∏–∏ (7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)
	weeklyAchievement := newStreakDays == 7

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–µ—Ä–∏–∏ (14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)
	twoWeekAchievement := newStreakDays == 14

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–µ—Ö–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–µ—Ä–∏–∏ (21 –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥)
	threeWeekAchievement := newStreakDays == 21

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Å—è—á–Ω–æ–π —Å–µ—Ä–∏–∏ (30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)
	monthlyAchievement := newStreakDays == 30

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–π —Å–µ—Ä–∏–∏ (90 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)
	quarterlyAchievement := newStreakDays == 90

	// –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	b.logger.Infof("DEBUG calculateCalories RESULT: caloriesToAdd=%d, newStreakDays=%d, weekly=%t, twoWeek=%t, threeWeek=%t, monthly=%t, quarterly=%t",
		caloriesToAdd, newStreakDays, weeklyAchievement, twoWeekAchievement, threeWeekAchievement, monthlyAchievement, quarterlyAchievement)

	return caloriesToAdd, newStreakDays, weeklyAchievement, twoWeekAchievement, threeWeekAchievement, monthlyAchievement, quarterlyAchievement
}

func (b *Bot) calculateRemainingTime(messageLog *models.MessageLog) time.Duration {
	// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–∞–π–º–µ—Ä
	if messageLog.TimerStartTime == nil {
		return 7 * 24 * time.Hour
	}

	// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞
	timerStart, err := utils.ParseMoscowTime(*messageLog.TimerStartTime)
	if err != nil {
		b.logger.Errorf("Failed to parse timer start time: %v", err)
		return 7 * 24 * time.Hour
	}

	// –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ (7 –¥–Ω–µ–π)
	fullTimerDuration := 7 * 24 * time.Hour

	// –ï—Å–ª–∏ –±—ã–ª –±–æ–ª—å–Ω–∏—á–Ω—ã–π, —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
	if messageLog.SickLeaveStartTime != nil && messageLog.HasSickLeave && !messageLog.HasHealthy {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º - —Ç–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –º–æ–º–µ–Ω—Ç –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
		sickLeaveStart, err := utils.ParseMoscowTime(*messageLog.SickLeaveStartTime)
		if err != nil {
			b.logger.Errorf("Failed to parse sick leave start time: %v", err)
			return fullTimerDuration
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ –¥–æ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
		timeBeforeSickLeave := sickLeaveStart.Sub(timerStart)

		// –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –º–æ–º–µ–Ω—Ç –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
		remainingTime := fullTimerDuration - timeBeforeSickLeave

		if remainingTime <= 0 {
			return 0 // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
		}

		return remainingTime
	}

	// –ï—Å–ª–∏ –±—ã–ª –±–æ–ª—å–Ω–∏—á–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª
	if messageLog.SickLeaveStartTime != nil && messageLog.HasSickLeave && messageLog.HasHealthy {
		sickLeaveStart, err := utils.ParseMoscowTime(*messageLog.SickLeaveStartTime)
		if err != nil {
			b.logger.Errorf("Failed to parse sick leave start time: %v", err)
			return fullTimerDuration
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ –¥–æ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
		timeBeforeSickLeave := sickLeaveStart.Sub(timerStart)

		// –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ
		remainingTime := fullTimerDuration - timeBeforeSickLeave

		// –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–æ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
		if remainingTime <= 0 {
			return 0 // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
		}

		return remainingTime
	}

	// –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
	moscowNow := utils.GetMoscowTime()
	elapsedTime := moscowNow.Sub(timerStart)
	remainingTime := fullTimerDuration - elapsedTime

	if remainingTime <= 0 {
		return 0 // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
	}

	return remainingTime
}

func (b *Bot) sendWeeklyCupsReward(msg *tgbotapi.Message, username string, streakDays int) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 42 –∫—É–±–∫–∞–º–∏
	cupsMessage := fmt.Sprintf(`üèÜ –ù–ï–í–ï–†–û–Ø–¢–ù–û! üèÜ

%s, —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è —É–∂–µ %d –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! 


üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üéØ 42 –ö–£–ë–ö–ê –∑–∞ —Ç–≤–æ—é –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é! üéØ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

ü¶Å Fat Leopard –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π! 
üí™ –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!
üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!

#weekly_champion #42_cups #training_streak`, username, streakDays)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É–±–∫–∞–º–∏
	reply := tgbotapi.NewMessage(msg.Chat.ID, cupsMessage)

	b.logger.Infof("Sending weekly cups reward to chat %d for user %s (streak: %d days)", msg.Chat.ID, username, streakDays)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send weekly cups reward: %v", err)
	} else {
		b.logger.Infof("Successfully sent weekly cups reward to chat %d for user %s", msg.Chat.ID, username)
	}
}

func (b *Bot) sendMonthlyCupsReward(msg *tgbotapi.Message, username string, streakDays int) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 420 –∫—É–±–∫–∞–º–∏
	cupsMessage := fmt.Sprintf(`üèÜüèÜüèÜ –õ–ï–ì–ï–ù–î–ê! üèÜüèÜüèÜ

%s, —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è —É–∂–µ %d –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! 

üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

üéØ 420 –ö–£–ë–ö–û–í –ó–ê –¢–í–û–Æ –ú–ï–°–Ø–ß–ù–£–Æ –°–ï–†–ò–Æ! üéØ

ü¶Å Fat Leopard –≤ —à–æ–∫–µ –æ—Ç —Ç–≤–æ–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏! 
üí™ –¢—ã –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞!
üî• –¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥!
‚≠ê –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω —á–µ–º–ø–∏–æ–Ω–æ–≤!

#monthly_legend #420_cups #training_legend`, username, streakDays)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É–±–∫–∞–º–∏
	reply := tgbotapi.NewMessage(msg.Chat.ID, cupsMessage)

	b.logger.Infof("Sending monthly cups reward to chat %d for user %s (streak: %d days)", msg.Chat.ID, username, streakDays)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send monthly cups reward: %v", err)
	} else {
		b.logger.Infof("Successfully sent monthly cups reward to chat %d for user %s", msg.Chat.ID, username)
	}
}

func (b *Bot) sendQuarterlyCupsReward(msg *tgbotapi.Message, username string, streakDays int) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 4200 –∫—É–±–∫–∞–º–∏
	cupsMessage := fmt.Sprintf(`üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ –ë–û–ñ–ï–°–¢–í–ï–ù–ù–û! üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

%s, —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è —É–∂–µ %d –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! 

üéØ 4200 –ö–£–ë–ö–û–í –ó–ê –¢–í–û–Æ –ö–í–ê–†–¢–ê–õ–¨–ù–£–Æ –°–ï–†–ò–Æ! üéØ

ü¶Å Fat Leopard –ø–∞–¥–∞–µ—Ç –≤ –æ–±–º–æ—Ä–æ–∫ –æ—Ç —Ç–≤–æ–µ–π —Å–∏–ª—ã –≤–æ–ª–∏! 
üí™ –¢—ã –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ!
üî• –¢—ã –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—à—å –∑–∞–∫–æ–Ω—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏!
‚≠ê –¢—ã –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!
üëë –¢—ã –∫–æ—Ä–æ–ª—å –≤—Å–µ—Ö –∫–æ—Ä–æ–ª–µ–π!
üåü –¢—ã —Å–∏—è–µ—à—å —è—Ä—á–µ –≤—Å–µ—Ö –∑–≤–µ–∑–¥!

#quarterly_god #4200_cups #training_emperor`, username, streakDays)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É–±–∫–∞–º–∏
	reply := tgbotapi.NewMessage(msg.Chat.ID, cupsMessage)

	b.logger.Infof("Sending quarterly cups reward to chat %d for user %s (streak: %d days)", msg.Chat.ID, username, streakDays)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send quarterly cups reward: %v", err)
	} else {
		b.logger.Infof("Successfully sent quarterly cups reward to chat %d for user %s", msg.Chat.ID, username)
	}
}

func (b *Bot) sendTwoWeekCupsReward(msg *tgbotapi.Message, username string, streakDays int) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 42 –∫—É–±–∫–∞–º–∏
	cupsMessage := fmt.Sprintf(`üèÜüèÜ –ù–ï–í–ï–†–û–Ø–¢–ù–û! üèÜüèÜ

%s, —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è —É–∂–µ %d –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! 

üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üéØ 42 –ö–£–ë–ö–ê –∑–∞ —Ç–≤–æ—é –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é! üéØ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

ü¶Å Fat Leopard –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç —Ç–≤–æ–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏! 
üí™ –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∏–Ω!
üî• –¢–≤–æ—è —Å–∏–ª–∞ —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º!
‚≠ê –¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –≤—Å—é —Å—Ç–∞—é!

#two_week_champion #42_cups #training_warrior`, username, streakDays)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É–±–∫–∞–º–∏
	reply := tgbotapi.NewMessage(msg.Chat.ID, cupsMessage)

	b.logger.Infof("Sending two-week cups reward to chat %d for user %s (streak: %d days)", msg.Chat.ID, username, streakDays)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send two-week cups reward: %v", err)
	} else {
		b.logger.Infof("Successfully sent two-week cups reward to chat %d for user %s", msg.Chat.ID, username)
	}
}

func (b *Bot) sendThreeWeekCupsReward(msg *tgbotapi.Message, username string, streakDays int) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 42 –∫—É–±–∫–∞–º–∏
	cupsMessage := fmt.Sprintf(`üèÜüèÜüèÜ –§–ï–ù–û–ú–ï–ù–ê–õ–¨–ù–û! üèÜüèÜüèÜ

%s, —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è —É–∂–µ %d –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! 

üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üéØ 42 –ö–£–ë–ö–ê –∑–∞ —Ç–≤–æ—é —Ç—Ä–µ—Ö–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é! üéØ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

ü¶Å Fat Leopard –ø–æ—Ä–∞–∂–µ–Ω —Ç–≤–æ–µ–π —Å–∏–ª–æ–π –≤–æ–ª–∏! 
üí™ –¢—ã –∞–±—Å–æ–ª—é—Ç–Ω—ã–π —á–µ–º–ø–∏–æ–Ω!
üî• –¢–≤–æ—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –∑–Ω–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü!
‚≠ê –¢—ã –ª–µ–≥–µ–Ω–¥–∞ —Å—Ä–µ–¥–∏ –ª–µ–æ–ø–∞—Ä–¥–æ–≤!
üëë –¢—ã –∫–æ—Ä–æ–ª—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏!

#three_week_legend #42_cups #training_king`, username, streakDays)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É–±–∫–∞–º–∏
	reply := tgbotapi.NewMessage(msg.Chat.ID, cupsMessage)

	b.logger.Infof("Sending three-week cups reward to chat %d for user %s (streak: %d days)", msg.Chat.ID, username, streakDays)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send three-week cups reward: %v", err)
	} else {
		b.logger.Infof("Successfully sent three-week cups reward to chat %d for user %s", msg.Chat.ID, username)
	}
}

func (b *Bot) sendSuperLevelMessage(msg *tgbotapi.Message, username string, totalCups int) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–ø–µ—Ä-—É—Ä–æ–≤–Ω–µ
	superMessage := fmt.Sprintf(`üåü‚ö° –°–£–ü–ï–†-–£–†–û–í–ï–ù–¨ –î–û–°–¢–ò–ì–ù–£–¢! ‚ö°üåü

%s, —Ç—ã –Ω–∞–∫–æ–ø–∏–ª %d –∫—É–±–∫–æ–≤! 

üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ
üèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ

üéä –í–°–ï –û–ñ–ò–î–ê–ù–ò–Ø –ü–†–ï–í–ó–û–ô–î–ï–ù–´! üéä

ü¶Å Fat Leopard –≤ –ø–æ–ª–Ω–æ–º –≤–æ—Å—Ç–æ—Ä–≥–µ! 
üí™ –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–µ–º–ø–∏–æ–Ω - —Ç—ã –°–£–ü–ï–†-–ß–ï–ú–ü–ò–û–ù!
üî• –¢–≤–æ—è —Å–∏–ª–∞ –∏ –º–æ—â—å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã!
‚≠êÔ∏è –¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –≤—Å—é —Å—Ç–∞—é!
üëë –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–∏—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç!
üåü –¢—ã —Å–∏—è–µ—à—å —è—Ä—á–µ –≤—Å–µ—Ö!

üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —Å—É–ø–µ—Ä-–ª–µ–æ–ø–∞—Ä–¥!

#super_level #%d_cups #motivation_king`, username, totalCups, totalCups)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–ø–µ—Ä-—É—Ä–æ–≤–Ω–µ
	reply := tgbotapi.NewMessage(msg.Chat.ID, superMessage)

	b.logger.Infof("Sending super level message to chat %d for user %s (total cups: %d)", msg.Chat.ID, username, totalCups)
	_, err := b.api.Send(reply)
	if err != nil {
		b.logger.Errorf("Failed to send super level message: %v", err)
	} else {
		b.logger.Infof("Successfully sent super level message to chat %d for user %s", msg.Chat.ID, username)
	}
}
